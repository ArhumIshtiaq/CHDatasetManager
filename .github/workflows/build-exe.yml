name: Build Python Executable

on:
  push:
    branches: [ main ] # Build on pushes to main (no release created here by default)
    tags:
      - 'v*'          # Build and create/update release on pushes to tags like v1.0, v0.1.0-alpha
  release:
    types: [created]   # Build and attach to a release manually created in GitHub UI

jobs:
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write  # Required to create releases and upload release assets
      # packages: write # Only if you were publishing to GitHub Packages
      # actions: read    # Default
      # checks: write   # If you need to create check runs

    strategy:
      matrix:
        python-version: ['3.9'] # Choose a Python version compatible with your dependencies

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # Enable caching for pip dependencies managed by setup-python

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      shell: bash # Use bash for this command for consistency across runners if needed

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller # Also install PyInstaller here to benefit from caching

    # - name: Install PyInstaller # This step is now combined with "Install dependencies"
    #   run: pip install pyinstaller

    - name: Build executable with PyInstaller
      # PyInstaller will run from the repository root
      run: |
        pyinstaller --name VideoPlacer `
                    --onefile `
                    --noconsole `
                    --hidden-import=tkinterdnd2 `
                    VideoPlacerv2.py # Script name relative to repository root
        # Notes:
        # - Update --icon path if your icon is elsewhere, or remove it.
        # - --noconsole is used for GUI applications to prevent a command window from appearing.
        # - --hidden-import=tkinterdnd2 is added as TkinterDnD2 can sometimes be missed by PyInstaller's analysis.
        #   If you encounter other "ModuleNotFound" errors for the .exe, add them as --hidden-import=modulename.
        # - The backtick (`) character is for line continuation in PowerShell.

    - name: Upload Executable Artifact
      uses: actions/upload-artifact@v4
      with:
        name: VideoPlacer-Windows-exe
        path: dist/VideoPlacer.exe # PyInstaller outputs the .exe to a 'dist' folder

    - name: Create GitHub Release and Upload Asset
      # This step runs for:
      # 1. Pushes to tags starting with 'v' (e.g., v1.0.0)
      # 2. When a release is manually created in the GitHub UI
      # 3. Pushes to the 'main' branch (will create/update a 'dev-latest' pre-release)
      if: (startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release') || (github.ref == 'refs/heads/main' && github.event_name == 'push')
      uses: softprops/action-gh-release@v2
      with:
        files: dist/VideoPlacer.exe # Path to the asset to upload
        # For 'main' branch pushes, use 'dev-latest' tag. Otherwise, let the action infer from the Git tag or manual release event.
        tag_name: ${{ (github.ref == 'refs/heads/main' && github.event_name == 'push') && 'dev-latest' || '' }}
        # Customize release name based on the trigger
        name: ${{ (github.ref == 'refs/heads/main' && github.event_name == 'push') && 'Development Build (main)' || format('Release {0}', github.ref_name) }}
        # Customize release body
        body: |
          ${{ (github.ref == 'refs/heads/main' && github.event_name == 'push') && format('Latest development build from main branch. Commit: {0}', github.sha) || 'Official release. See CHANGELOG.md for details.' }}
        # Mark as pre-release for 'main' branch builds or if the version tag contains a hyphen (e.g., v1.0.0-beta)
        prerelease: ${{ (github.ref == 'refs/heads/main' && github.event_name == 'push') || (startsWith(github.ref, 'refs/tags/v') && contains(github.ref_name, '-')) || (github.event_name == 'release' && contains(github.ref_name, '-')) }}
        draft: false # Set to true if you want 'main' branch releases to be drafts initially
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by GitHub Actions
